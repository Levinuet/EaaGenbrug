@page "/"
@using Core.Model
@using ServerAPI.Repositories
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1 class="mb-3">Tilgængelige Annoncer</h1>

<div class="ads-container">
    @if (eaagenbrug == null)
    {
            <p class="loading"><em>Loading...</em></p>
    }
    else if (eaagenbrug.Length == 0)
    {
            <p class="no-ads"><em>No ads available.</em></p>
    }
    else
    {
        @foreach (var ad in eaagenbrug)
        {
                    <div class="card">
                        <h5 class="card-title">@ad.Title</h5>
                        <img class="card-img" src="@ad.ImageUrl" alt="Item Image">
                        <div class="card-info">
                            <p>Price: @ad.Price.ToString("C")</p>
                            <p>Location: @ad.Location</p>
                            <p>Category: @ad.Category</p>
                            <p>Status: @ad.Status</p>
                            <p>Description: @ad.Description</p>
                            <p>Seller: @ad.SellerUserName</p>
                            <button class="btn btn-primary" @onclick="() => PurchaseItem(ad)">Buy Now</button>
                        </div>
                    </div>
        }
    }
</div>

@code {
    private Ad[]? eaagenbrug;
    private string serverUrl = "https://localhost:7189";
    private string username = "Default User"; // Default username
    private bool isLoggedIn = false; // Login status

    protected override async Task OnInitializedAsync()
    {
        await FetchUserDetails();
        await FetchAds();
    }

    private async Task FetchUserDetails()
    {
        try
        {
            var isLoggedInStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isLoggedIn");
            isLoggedIn = isLoggedInStr != null && isLoggedInStr.Equals("true", StringComparison.OrdinalIgnoreCase);

            if (isLoggedIn)
            {
                username = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username") ?? "Default User";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching user details: " + ex.Message);
        }
    }

    private async Task FetchAds()
    {
        try
        {
            eaagenbrug = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/eaagenbrug/getall");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load ads: {ex.Message}");
            eaagenbrug = Array.Empty<Ad>();
        }
    }

    private async Task PurchaseItem(Ad ad)
    {
        ad.BuyerUserName = isLoggedIn ? username : "Guest"; // Set BuyerUserName based on login status

        var response = await Http.PostAsJsonAsync<Ad>($"{serverUrl}/api/eaagenbrug/purchase", ad);
        Console.WriteLine("Client: purchase " + ad.Title + " by " + ad.BuyerUserName);

        await FetchAds(); // Refresh the ads list after purchase
    }

}
    
