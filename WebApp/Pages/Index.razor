@page "/"
@using Core.Model
@using ServerAPI.Repositories
@inject HttpClient Http

<h1 class="mb-3">Tilgængelige Annoncer</h1>

<div class="ads-container">
    @if (shoppingList == null)
    {
        <p class="loading"><em>Loading...</em></p>
    }
    else if (shoppingList.Length == 0)
    {
        <p class="no-ads"><em>No ads available.</em></p>
    }
    else
    {
        @foreach (var item in shoppingList)
        {
            <div class="card">
                <h5 class="card-title">@item.Title</h5>
                <img class="card-img" src="@item.ImageUrl" alt="Item Image">
                <div class="card-info">
                    <p>Price: @item.Price.ToString("C")</p>
                    <p>Location: @item.Location</p>
                    <p>Category: @item.Category</p>
                    <p>Status: @item.Status</p>
                    <p>Description: @item.Description</p>
                    <button class="btn btn-primary" @onclick="() => PurchaseItem(item)">Buy Now</button>
                </div>
            </div>
        }
    }
</div>

@code {
    private Ad[]? shoppingList;
    private string serverUrl = "https://localhost:7189";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            shoppingList = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/shopping/getall");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load ads: {ex.Message}");
            shoppingList = Array.Empty<Ad>();
        }
    }
    
    private async Task PurchaseItem(Ad item)
    {
            var response = await Http.PostAsJsonAsync<Ad>($"{serverUrl}/api/shopping/purchase", item);
      
            shoppingList = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/shopping/getall");

    }
}