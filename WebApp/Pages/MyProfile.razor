@page "/myprofile"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http;
@using Core.Model;
@using ServerAPI.Repositories;

<h1>Min side</h1>

@if (isLoggedIn)
{
    <p>Velkommen til din side, @username! Her kan du se dine aktive annoncer og dine tidligere køb samt svare på købsanmodninger</p>

    <button class="btn btn-primary" @onclick="CreateAd">Opret annonce</button>

    <h2>Mine Annoncer</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Price</th>
                <th>Location</th>
                <th>Category</th>
                <th>Image</th>
                <th>Status</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ad in activeAds)
            {
                <tr>
                    <td>@ad.Title</td>
                    <td>@ad.Price</td>
                    <td>@ad.Location</td>
                    <td>@ad.Category</td>
                    <td><img src="@ad.ImageUrl" alt="Item Image" style="height:50px;" /></td>
                    <td>@ad.Status</td>
                    <td><button class="btn btn-warning" @onclick="() => EditAd(ad)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal Popup for Editing Ad -->
    @if (editingAd != null)
    {
        <div class="modal" tabindex="-1" style="display:block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Ad</h5>
                        <button type="button" class="close" @onclick="CancelEdit">&times;</button>
                    </div>
                    <div class="modal-body">
                        <input type="text" @bind="editingAd.Title" class="form-control mb-2" placeholder="Title">
                        <input type="number" @bind="editingAd.Price" class="form-control mb-2" placeholder="Price">
                        <input type="text" @bind="editingAd.Location" class="form-control mb-2" placeholder="Location">
                        <input type="text" @bind="editingAd.Category" class="form-control mb-2" placeholder="Category">
                        <input type="text" @bind="editingAd.ImageUrl" class="form-control mb-2" placeholder="Image URL">
                        <input type="text" @bind="editingAd.Status" class="form-control mb-2" placeholder="Status">
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="() => SaveAd(editingAd)">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <h2>Mine Køb</h2>
    <!-- Purchases Table -->
}
else
{
    <p>Du er ikke logget ind <a href="/login">Klik her for at logge ind</a>.</p>
}
<img src="busy.gif" style="display:@busyDisplayStyle" />

@code {
    private bool isLoggedIn = false;
    private string username = "Default User";
    private Ad[]? activeAds = new Ad[0];
    private Ad[]? reservedAds = new Ad[0];
    private string busyDisplayStyle = "none";
    private string serverUrl = "https://localhost:7189";
    private Ad? editingAd; // Tracks the ad currently being edited

    protected override async Task OnInitializedAsync()
    {
        var isLoggedInStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isLoggedIn");
        isLoggedIn = isLoggedInStr != null && isLoggedInStr.Equals("true", StringComparison.OrdinalIgnoreCase);

        if (isLoggedIn)
        {
            username = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username") ?? "Default User";

            // Show busy indicator
            busyDisplayStyle = "block";

            // Fetch all ads
            var allAds = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/eaagenbrug/getall");

            // Split ads into active and reserved
            activeAds = allAds?.Where(ad => ad.SellerUserName == username).ToArray() ?? new Ad[0];
            reservedAds = allAds?.Where(ad => ad.BuyerUserName == username).ToArray() ?? new Ad[0];

            // Hide busy indicator
            busyDisplayStyle = "none";
        }
        else
        {
            activeAds = new Ad[0];
            reservedAds = new Ad[0];
        }
    }


    private void CreateAd()
    {
        NavigationManager.NavigateTo("/create");
    }

    private void EditAd(Ad ad)
    {
        editingAd = ad; // Open the modal with the ad details
    }

    private async Task SaveAd(Ad ad)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"{serverUrl}/api/eaagenbrug/update", ad);
            if (response.IsSuccessStatusCode)
            {
                editingAd = null; // Attempt to close the modal
                StateHasChanged(); // Ensure UI updates
            }
            else
            {
                Console.WriteLine("Failed to update the ad: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving ad: " + ex.Message);
            // Optionally, handle errors such as displaying an error message to the user
        }
    }

    private void CancelEdit()
    {
        editingAd = null; // Close the modal
    }
}
