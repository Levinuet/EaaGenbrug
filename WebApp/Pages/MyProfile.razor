@page "/myprofile"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Core.Model;

<h1>My Profile Page</h1>

@if (isLoggedIn)
{
<div class="welcome-message">
    <p>Welcome to your Profile Page, @username! Here you can see your Active, Reserved and Sold Ads - Aswell as your purchased Ads.</p>
    <button class="btn btn-primary" @onclick="CreateAd">Create Ad</button>
  
</div>
    <h2>My Ads</h2>
<div class="ads-container">
    
        @foreach (var ad in activeAds)
        {
            <div class="card">
            <h5 class="card-title">@ad.Title</h5>
            <img class="card-img" src="@ad.ImageUrl" alt="Item Image" style="height: 100px;">
            <p class="card-text">Price: @ad.Price.ToString("C")</p>
            <p class="card-text">Location: @ad.Location</p>
            <p class="card-text">Category: @ad.Category</p>
            <p class="@(ad.Status == "Reserved" ? "card-status-r" : "")">@ad.Status</p>
                @if (ad.Status == "Reserved")
                    {
                    <button class="btn btn-success sold-btn" @onclick="() => ApprovePurchase(ad)">Mark as Sold</button>
                    }
            </div>
        }
</div>

    <div class="sold-products">
        <h2>Solgte produkter</h2>
        @foreach (var ad in soldAds)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@ad.Title</h5>
                    <img class="card-img" src="@ad.ImageUrl" alt="Item Image" style="height: 100px;">
                    <p class="card-text">Price: @ad.Price.ToString("C")</p>
                    <p class="card-text">Location: @ad.Location</p>
                    <p class="card-text">Category: @ad.Category</p>
                    <p class="card-status-s">@ad.Status</p>
                </div>
            </div>
        }
    </div>
}
else
{
<p>You're not logged in <a href="/login">Click here to login</a>.</p>
}
<img src="busy.gif" style="display:@busyDisplayStyle" />
    
    <!--PopUp window for editing an Ad -->
    @if (editingAd != null)
    {
        <div class="modal" tabindex="-1" style="display:block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Ad</h5>
                        <button type="button" class="close" @onclick="CancelEdit">&times;</button>
                    </div>
                    <div class="modal-body">
                        <input type="text" @bind="editingAd.Title" class="form-control mb-2" placeholder="Title">
                        <input type="number" @bind="editingAd.Price" class="form-control mb-2" placeholder="Price">
                        <input type="text" @bind="editingAd.Location" class="form-control mb-2" placeholder="Location">
                        <input type="text" @bind="editingAd.Category" class="form-control mb-2" placeholder="Category">
                        <input type="text" @bind="editingAd.ImageUrl" class="form-control mb-2" placeholder="Image URL">
                        <input type="text" @bind="editingAd.Status" class="form-control mb-2" placeholder="Status">
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="() => SaveAd(editingAd)">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }

@code {
    private bool isLoggedIn = false;
    private string username = "Default User";
    private Ad[]? activeAds = new Ad[0];
    private Ad[]? soldAds = new Ad[0];
    private string busyDisplayStyle = "none";
    private string serverUrl = "https://localhost:7189";
    private Ad? editingAd; // Tracks the ad currently being edited

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Loads profile data (login state, username, active and sold ads) on initial render and updates UI.
        if (firstRender)
        {
            await LoadProfileData();
            StateHasChanged();
        }
    }

    private async Task LoadProfileData()
    {
        // Retrieves login status and username from LocalStorage.
        // Fetches all ads and filters them into active and sold lists based on user and status.
        // Updates UI elements with retrieved data (username, busy indicator, ad lists).
        isLoggedIn = await LocalStorage.GetItemAsync<bool>("isLoggedIn");
        if (isLoggedIn)
        {
            username = await LocalStorage.GetItemAsync<string>("username") ?? "Default User";
            busyDisplayStyle = "block"; // Show busy indicator while fetching data
            var allAds = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/eaagenbrug/getall");
            activeAds = allAds?.Where(ad => ad.SellerUserName == username && ad.Status != "Sold").ToArray() ?? new Ad[0];
            soldAds = allAds?.Where(ad => ad.SellerUserName == username && ad.Status == "Sold").ToArray() ?? new Ad[0];
            busyDisplayStyle = "none"; // Hide busy indicator after data is fetched
        }
        else
        {
            activeAds = new Ad[0];
            soldAds = new Ad[0];
        }
    }

    private void CreateAd()
    {
        // Navigates the user to the "/create" page to create a new ad.
        NavigationManager.NavigateTo("/create");
    }

    private async Task ApprovePurchase(Ad ad)
    {
        // Updates the ad's buyer information based on login status and sends an approval request to the server.
        // Refetches all ads and updates the active and sold ad lists based on user and status.
        ad.BuyerUserName = isLoggedIn ? username : "Guest";
        var response = await Http.PostAsJsonAsync<Ad>($"{serverUrl}/api/eaagenbrug/approve", ad);
        var allAds = await Http.GetFromJsonAsync<Ad[]>($"{serverUrl}/api/eaagenbrug/getall");
        activeAds = allAds?.Where(ad => ad.SellerUserName == username && ad.Status != "Sold").ToArray() ?? new Ad[0];
        soldAds = allAds?.Where(ad => ad.SellerUserName == username && ad.Status == "Sold").ToArray() ?? new Ad[0];
    }

    private void EditAd(Ad ad)
    {
        // Opens a modal window (editingAd) for editing the selected ad.
        editingAd = ad;
    }

    private async Task SaveAd(Ad ad)
    {
        // Attempts to update the ad on the server.
        // Handles success and failure scenarios, including closing the modal and updating UI on success.
        // Logs errors to the console and provides an option to display them to the user.
        try
        {
            var response = await Http.PutAsJsonAsync($"{serverUrl}/api/eaagenbrug/update", ad);
            if (response.IsSuccessStatusCode)
            {
                editingAd = null; // Close the modal on successful update
                StateHasChanged(); // Update UI to reflect changes
            }
            else
            {
                Console.WriteLine("Failed to update the ad: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving ad: " + ex.Message);
            // Optionally, handle errors such as displaying an error message to the user
        }
    }

    private void CancelEdit()
    {
        // Closes the ad editing modal window.
        editingAd = null;
    }
    }