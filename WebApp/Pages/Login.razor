@page "/login"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Core.Model

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginDto loginModel = new LoginDto();
    private bool isRegistering = true;
    private string errorMessage = "";
    private HttpClient http;

    protected override void OnInitialized()
    {
        // Creates an HttpClient instance named "http" for making HTTP requests.
        http = HttpClientFactory.CreateClient("MyClient");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Checks login status on initial render. If logged in, redirects to the profile page.
        if (firstRender)
        {
            var loggedIn = await LocalStorage.GetItemAsync<bool>("isLoggedIn");
            if (loggedIn)
            {
                NavigationManager.NavigateTo("/myprofile", true);
            }
        }
    }

    private async Task HandleLogin()
    {
        // Sends login request to the server and handles the response.
        // Stores login state and username on successful login and redirects to profile page.
        var response = await http.PostAsJsonAsync("https://localhost:7189/user/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            await LocalStorage.SetItemAsync("isLoggedIn", true);
            await LocalStorage.SetItemAsync("username", loginModel.Username);
            NavigationManager.NavigateTo("/myprofile", true);
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            StateHasChanged(); // Signal UI to update with any potential error message
        }
    }

    private void ToggleForm()
    {
        // Switches between registration and login form.
        isRegistering = !isRegistering;
    }
}

