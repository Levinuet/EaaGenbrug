@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>WebApp</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (isLoggedIn)
            {
                <button @onclick="Logout">Logout</button>
            }
            else
            {
                <a href="/login/">Login</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isLoggedIn = false;
    private bool isRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isLoggedInStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isLoggedIn");
            isLoggedIn = isLoggedInStr == "true";
            isRendered = true;
            StateHasChanged(); // Re-render the component with the updated state
        }
    }

    private async Task Logout()
    {
        // Update localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isLoggedIn");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");

        // Redirect to the homepage or login page
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}
